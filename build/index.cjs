'use strict';

var s=class r{constructor(){this.traces=[];}static empty(){return new r}add(t){let e=new r;return e.traces=[...this.traces,t],e}*[Symbol.iterator](){for(let t of this.traces)yield t;}};var a=class r{constructor(t,e){this.message=t,this.time=e;}static from(t,e){return new r(t,e)}read(){return this.message}at(){return this.time}};var d=Symbol("JsMonadSomeSymbol"),C;C=d;var p=class p{constructor(t){this[C]=!0;this.value=t;}static of(t){return new p(t)}bind(t){return t(this.value)}unwrap(){return this.value}map(t){let e=t(this.value);return p.of(e)}},l=p;function E(r){return r&&r[d]===!0}var R=Symbol("JsMonadNoneSymbol"),g;g=R;var T=class T{constructor(){this[g]=!0;}static of(){return new T}bind(t){return this}unwrap(){throw new Error("Value of None cannot be unwrapped")}map(t){return this}},u=T;function F(r){return r&&r[R]===!0}var i=class r{constructor(){this.contexts={};}static empty(){return new r}get(t){return this.contexts[t]?l.of(this.contexts[t]):u.of()}add(t,e){let o=new r;return o.contexts={...this.contexts},o.contexts[t]=e,o}remove(t){let e=new r;return e.contexts={...this.contexts},delete e.contexts[t],e}*[Symbol.iterator](){for(let t in this.contexts)yield this.contexts[t];}};var b=Symbol("JsMonadFailureSymbol"),w;w=b;var h=class h{constructor(t,e,o,m,n){this[w]=!0;this.message=t,this.name="Failure",this.code=e,this.traces=o,this.contexts=m,this.previous=n;}static dueTo(t,e,o,m,n,x){return n=n??s.empty(),m?n.add(m):n.add(a.from(t,Date.now())),x=x??i.empty(),new h(t,e,n,x,o||null)}bind(t){return this}map(t){return this}lift(t){return this}unwrap(){throw new Error("Value of Failure can not be unwrapped")}getTraces(){return this.traces}withTrace(t){return this.traces.add(t),this}withContext(t,e){return this.contexts.add(t,e),this}getContext(t){return this.contexts.get(t)}getContexts(){return this.contexts}clearContext(t){return this.contexts.remove(t),this}},f=h;function U(r){return r&&r[b]===!0}var O=Symbol("JsMonadSuccessSymbol"),S;S=O;var c=class c{constructor(t,e,o){this[S]=!0;this.value=t,this.traces=e,this.contexts=o;}static of(t,e,o){return new c(t,e??s.empty(),o??i.empty())}bind(t){return t(this.value)}lift(t){return new c(t,this.traces,this.contexts)}map(t){return new c(t(this.value),this.traces,this.contexts)}unwrap(){return this.value}getTraces(){return this.traces}withTrace(t){return this.traces.add(t),this}withContext(t,e){return this.contexts.add(t,e),this}getContext(t){return this.contexts.get(t)}getContexts(){return this.contexts}clearContext(t){return this.contexts.remove(t),this}},y=c;function J(r){return r&&r[O]===!0}var N=Symbol("JsMonadAwaitingSymbol"),A;A=N;var v=class{constructor(){this[A]=!0;}};function M(r){return r&&r[N]===!0}

exports.Awaiting = v;
exports.ContextCollection = i;
exports.Failure = f;
exports.None = u;
exports.Some = l;
exports.Success = y;
exports.TraceCollection = s;
exports.TraceCommon = a;
exports.isAwaiting = M;
exports.isFailure = U;
exports.isNone = F;
exports.isSome = E;
exports.isSuccess = J;
//# sourceMappingURL=out.js.map
//# sourceMappingURL=data:application/json;base64,