var s=class e{constructor(){this.traces=[];}static empty(){return new e}add(t){let r=new e;return r.traces=[...this.traces,t],r}*[Symbol.iterator](){for(let t of this.traces)yield t;}};var a=class e{constructor(t,r){this.message=t,this.time=r;}static from(t,r){return new e(t,r)}read(){return this.message}at(){return this.time}};var g=Symbol("JsMonadSomeSymbol"),d;d=g;var p=class p{constructor(t){this[d]=!0;this.value=t;}static of(t){return new p(t)}bind(t){return t(this.value)}unwrap(){return this.value}map(t){let r=t(this.value);return p.of(r)}},l=p;function E(e){return e&&e[g]===!0}var w=Symbol("JsMonadNoneSymbol"),R;R=w;var f=class f{constructor(){this[R]=!0;}static of(){return new f}bind(t){return this}unwrap(){throw new Error("Value of None cannot be unwrapped")}map(t){return this}},u=f;function F(e){return e&&e[w]===!0}var i=class e{constructor(){this.contexts={};}static empty(){return new e}get(t){return this.contexts[t]?l.of(this.contexts[t]):u.of()}add(t,r){let o=new e;return o.contexts={...this.contexts},o.contexts[t]=r,o}remove(t){let r=new e;return r.contexts={...this.contexts},delete r.contexts[t],r}*[Symbol.iterator](){for(let t in this.contexts)yield this.contexts[t];}};var S=Symbol("JsMonadFailureSymbol"),b;b=S;var h=class h{constructor(t,r,o,m,n){this[b]=!0;this.message=t,this.name="Failure",this.code=r,this.traces=o,this.contexts=m,this.previous=n;}static dueTo(t,r,o,m,n,x){return n=n??s.empty(),m?n.add(m):n.add(a.from(t,Date.now())),x=x??i.empty(),new h(t,r,n,x,o||null)}bind(t){return this}map(t){return this}lift(t){return this}unwrap(){throw new Error("Value of Failure can not be unwrapped")}getTraces(){return this.traces}withTrace(t){return this.traces.add(t),this}withContext(t,r){return this.contexts.add(t,r),this}getContext(t){return this.contexts.get(t)}getContexts(){return this.contexts}clearContext(t){return this.contexts.remove(t),this}},T=h;function U(e){return e&&e[S]===!0}var O=Symbol("JsMonadSuccessSymbol"),A;A=O;var c=class c{constructor(t,r,o){this[A]=!0;this.value=t,this.traces=r,this.contexts=o;}static of(t,r,o){return new c(t,r??s.empty(),o??i.empty())}bind(t){return t(this.value)}lift(t){return new c(t,this.traces,this.contexts)}map(t){return new c(t(this.value),this.traces,this.contexts)}unwrap(){return this.value}getTraces(){return this.traces}withTrace(t){return this.traces.add(t),this}withContext(t,r){return this.contexts.add(t,r),this}getContext(t){return this.contexts.get(t)}getContexts(){return this.contexts}clearContext(t){return this.contexts.remove(t),this}},y=c;function J(e){return e&&e[O]===!0}var v=Symbol("JsMonadAwaitingSymbol"),N;N=v;var C=class{constructor(){this[N]=!0;}};function M(e){return Array.isArray(e)?e.some(t=>t&&t[v]===!0):e&&e[v]===!0}

export { C as Awaiting, i as ContextCollection, T as Failure, u as None, l as Some, y as Success, s as TraceCollection, a as TraceCommon, M as isAwaiting, U as isFailure, F as isNone, E as isSome, J as isSuccess };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=data:application/json;base64,