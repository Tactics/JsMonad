'use strict';var react=require('react'),U=require('fast-deep-equal');function _interopDefault(e){return e&&e.__esModule?e:{default:e}}var U__default=/*#__PURE__*/_interopDefault(U);var l=class e{constructor(){this.traces=[];}static empty(){return new e}add(t){let r=new e;return r.traces=[...this.traces,t],r}*[Symbol.iterator](){for(let t of this.traces)yield t;}};var p=class e{constructor(t,r){this.message=t,this.time=r;}static from(t,r){return new e(t,r)}read(){return this.message}at(){return this.time}};var h=Symbol("JsMonadSomeSymbol"),T,f=class e{constructor(t){this[T]=true;this.value=t;}static[(T=h,Symbol.hasInstance)](t){return y(t)}static of(t){return new e(t)}bind(t){return t(this.value)}unwrap(){return this.value}map(t){let r=t(this.value);return e.of(r)}};function y(e){return e&&e[h]===true}var d=Symbol("JsMonadNoneSymbol"),v,x=class e{constructor(){this[v]=true;}static[(v=d,Symbol.hasInstance)](t){return C(t)}static of(){return new e}bind(t){return this}unwrap(){throw new Error("Value of None cannot be unwrapped")}map(t){return this}};function C(e){return e&&e[d]===true}var c=class e{constructor(){this.contexts={};}static empty(){return new e}get(t){return this.contexts[t]?f.of(this.contexts[t]):x.of()}add(t,r){let o=new e;return o.contexts={...this.contexts},o.contexts[t]=r,o}remove(t){let r=new e;return r.contexts={...this.contexts},delete r.contexts[t],r}*[Symbol.iterator](){for(let t in this.contexts)yield this.contexts[t];}};var g=Symbol("JsMonadFailureSymbol"),R,a=class e{constructor(t,r,o,n,i){this[R]=true;this.message=t,this.name="Failure",this.code=r,this.traces=o,this.contexts=n,this.previous=i;}static[(R=g,Symbol.hasInstance)](t){return w(t)}static dueTo(t,r,o,n,i,m){return i=i??l.empty(),n?i.add(n):i.add(p.from(t,Date.now())),m=m??c.empty(),new e(t,r,i,m,o||null)}bind(t){return this}map(t){return this}lift(t){return this}unwrap(){throw new Error("Value of Failure can not be unwrapped")}getTraces(){return this.traces}withTrace(t){return this.traces.add(t),this}withContext(t,r){return this.contexts.add(t,r),this}getContext(t){return this.contexts.get(t)}getContexts(){return this.contexts}clearContext(t){return this.contexts.remove(t),this}};function w(e){return e&&e[g]===true}var S=Symbol("JsMonadSuccessSymbol"),b,s=class e{constructor(t,r,o){this[b]=true;this.value=t,this.traces=r,this.contexts=o;}static[(b=S,Symbol.hasInstance)](t){return A(t)}static of(t,r,o){return new e(t,r??l.empty(),o??c.empty())}bind(t){return t(this.value)}lift(t){return new e(t,this.traces,this.contexts)}map(t){return new e(t(this.value),this.traces,this.contexts)}unwrap(){return this.value}getTraces(){return this.traces}withTrace(t){return this.traces.add(t),this}withContext(t,r){return this.contexts.add(t,r),this}getContext(t){return this.contexts.get(t)}getContexts(){return this.contexts}clearContext(t){return this.contexts.remove(t),this}};function A(e){return e&&e[S]===true}var E=Symbol("JsMonadAwaitingSymbol"),O;O=E;var u=class{constructor(){this[O]=true;}};function N(e){return e&&e[E]===true}function J(e,{onSuccess:t,onFailure:r}){let o=react.useRef(new u);react.useEffect(()=>{let n=o.current,i=n instanceof u&&(e instanceof s||e instanceof a)||n instanceof s&&e instanceof a||n instanceof a&&e instanceof s,m=e instanceof s&&n instanceof s&&!U__default.default(n.unwrap(),e.unwrap());(i||m)&&(e instanceof s&&t&&t(e.unwrap()),e instanceof a&&r&&r(e.unwrap())),o.current=e;},[e,t,r]);}exports.Awaiting=u;exports.ContextCollection=c;exports.Failure=a;exports.None=x;exports.Some=f;exports.Success=s;exports.TraceCollection=l;exports.TraceCommon=p;exports.isAwaiting=N;exports.isFailure=w;exports.isNone=C;exports.isSome=y;exports.isSuccess=A;exports.useEffectAsyncResult=J;//# sourceMappingURL=index.js.map
//# sourceMappingURL=data:application/json;base64,