'use strict';var react=require('react'),B=require('fast-deep-equal'),jsxRuntime=require('react/jsx-runtime');function _interopDefault(e){return e&&e.__esModule?e:{default:e}}var B__default=/*#__PURE__*/_interopDefault(B);var l=class e{constructor(){this.traces=[];}static empty(){return new e}add(t){let r=new e;return r.traces=[...this.traces,t],r}*[Symbol.iterator](){for(let t of this.traces)yield t;}};var p=class e{constructor(t,r){this.message=t,this.time=r;}static from(t,r){return new e(t,r)}read(){return this.message}at(){return this.time}};var g=Symbol("JsMonadSomeSymbol"),C,f=class e{constructor(t){this[C]=true;this.value=t;}static[(C=g,Symbol.hasInstance)](t){return S(t)}static of(t){return new e(t)}bind(t){return t(this.value)}unwrap(){return this.value}map(t){let r=t(this.value);return e.of(r)}};function S(e){return e&&e[g]===true}var w=Symbol("JsMonadNoneSymbol"),b,x=class e{constructor(){this[b]=true;}static[(b=w,Symbol.hasInstance)](t){return A(t)}static of(){return new e}bind(t){return this}unwrap(){throw new Error("Value of None cannot be unwrapped")}map(t){return this}};function A(e){return e&&e[w]===true}var u=class e{constructor(){this.contexts={};}static empty(){return new e}get(t){return this.contexts[t]?f.of(this.contexts[t]):x.of()}add(t,r){let o=new e;return o.contexts={...this.contexts},o.contexts[t]=r,o}remove(t){let r=new e;return r.contexts={...this.contexts},delete r.contexts[t],r}*[Symbol.iterator](){for(let t in this.contexts)yield this.contexts[t];}};var E=Symbol("JsMonadFailureSymbol"),O,a=class e{constructor(t,r,o,n,s){this[O]=true;this.message=t,this.name="Failure",this.code=r,this.traces=o,this.contexts=n,this.previous=s;}static[(O=E,Symbol.hasInstance)](t){return F(t)}static dueTo(t,r,o,n,s,c){return s=s??l.empty(),n?s.add(n):s.add(p.from(t,Date.now())),c=c??u.empty(),new e(t,r,s,c,o||null)}bind(t){return this}map(t){return this}lift(t){return this}unwrap(){throw new Error("Value of Failure can not be unwrapped")}getTraces(){return this.traces}withTrace(t){return this.traces.add(t),this}withContext(t,r){return this.contexts.add(t,r),this}getContext(t){return this.contexts.get(t)}getContexts(){return this.contexts}clearContext(t){return this.contexts.remove(t),this}};function F(e){return e&&e[E]===true}var I=Symbol("JsMonadSuccessSymbol"),N,i=class e{constructor(t,r,o){this[N]=true;this.value=t,this.traces=r,this.contexts=o;}static[(N=I,Symbol.hasInstance)](t){return U(t)}static of(t,r,o){return new e(t,r??l.empty(),o??u.empty())}bind(t){return t(this.value)}lift(t){return new e(t,this.traces,this.contexts)}map(t){return new e(t(this.value),this.traces,this.contexts)}unwrap(){return this.value}getTraces(){return this.traces}withTrace(t){return this.traces.add(t),this}withContext(t,r){return this.contexts.add(t,r),this}getContext(t){return this.contexts.get(t)}getContexts(){return this.contexts}clearContext(t){return this.contexts.remove(t),this}};function U(e){return e&&e[I]===true}var M=Symbol("JsMonadAwaitingSymbol"),J;J=M;var m=class{constructor(){this[J]=true;}};function P(e){return e&&e[M]===true}function V(e,{onSuccess:t,onFailure:r}){let o=react.useRef(new m);react.useEffect(()=>{let n=o.current,s=n instanceof m&&(e instanceof i||e instanceof a)||n instanceof i&&e instanceof a||n instanceof a&&e instanceof i,c=e instanceof i&&n instanceof i&&!B__default.default(n.unwrap(),e.unwrap());(s||c)&&(e instanceof i&&t&&t(e),e instanceof a&&r&&r(e)),o.current=e;},[e,t,r]);}var k=V;function G(e){let{asyncResult:t,onLoading:r,onError:o,onSuccess:n}=e,[s,c]=react.useState(null),[R,L]=react.useState(false),[D,v]=react.useState(true);return k(t,{onSuccess:T=>{c(T),v(false);},onFailure:T=>{L(T),v(false);}}),D?jsxRuntime.jsx(jsxRuntime.Fragment,{children:r}):R?jsxRuntime.jsx(jsxRuntime.Fragment,{children:o(R)}):s?jsxRuntime.jsx(jsxRuntime.Fragment,{children:n(s)}):null}exports.AsyncResultSuspense=G;exports.Awaiting=m;exports.ContextCollection=u;exports.Failure=a;exports.None=x;exports.Some=f;exports.Success=i;exports.TraceCollection=l;exports.TraceCommon=p;exports.isAwaiting=P;exports.isFailure=F;exports.isNone=A;exports.isSome=S;exports.isSuccess=U;exports.useEffectAsyncResult=V;//# sourceMappingURL=index.js.map
//# sourceMappingURL=data:application/json;base64,